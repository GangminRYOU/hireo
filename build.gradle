plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "org.sonarqube" version "3.5.0.2730"
    id 'jacoco'
}

group = 'kr.binarybard'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.h2database:h2'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}
//querydsl설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}
//

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

tasks.register('copyDocs', Copy) {
    dependsOn 'asciidoctor'
    from "${asciidoctor.outputDir}"
    into 'src/main/resources/static/api/docs'
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false

        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = true

            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }

    afterEvaluate {
        def Qdomains = []
        for (qPattern in 'QA'..'QZ') {
            Qdomains.add('**/Q' + qPattern + '*.class')
        }

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/*Application.class',
                              '**/*Config.class',
                              '**/*Response.class',
                              '**/*Request.class',
                              '**/*Mapper.class',
                              '**/*MapperImpl.class',
                              '**/*Exception.class',
                              '**/*Repository.class',
                              '**/*Entity.class',
                              '**/*Builder.class',
                              '**/*Handler.class',
                              '**/config/**/*',
                              '**/domain/**/*',
                              '**/dto/**/*'] + Qdomains)
        }))
    }
}

sonar {
    properties {
        property "sonar.projectKey", "jobflearn"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}


